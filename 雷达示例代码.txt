#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/Twist.h>
#include <wiringPi.h>
#include <math.h>

ros::Publisher cmdVelPub;
geometry_msgs::Twist speed;

void run_forward();
void run_stop();
void turn_angle(float angle);
void my_callback(const sensor_msgs::LaserScan::ConstPtr& msg);

int main(int argc, char** argv)
{
	wiringPiSetup();
	ros::init(argc, argv, "find_bench");
	ros::NodeHandle nh;
	cmdVelPub = nh.advertise<geometry_msgs::Twist>("cmd_vel", 1);
	
	ros::Subscriber scan_sub = nh.subscribe("scan", 1, my_callback);
	ros::spin();
	return 0;
}

void run_forward()
{
	speed.linear.x = 0.01;
	speed.angular.z = 0;
	cmdVelPub.publish(speed);
}

void run_stop()
{
	speed.linear.x = 0;
	speed.angular.z = 0;
	cmdVelPub.publish(speed);
}

void turn_angle(float angle)
{
	float time = angle / 18.0;
	speed.linear.x = 0;
	speed.angular.z = 0.3;
	cmdVelPub.publish(speed);
	ros::Duration(time).sleep();
	speed.angular.z = 0;
	cmdVelPub.publish(speed);
	ros::Duration(2).sleep();
}

void my_callback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
	int* classify = new int[360];//存放聚类的类别
	int num = 0;//存放类的总数
	float* class_len = new float[360];//存放每一类的长度
	float forward_distance = msg -> ranges[0];//正前方的距离
	float temp0;
	float temp1 = msg -> ranges[0];
	float temp_len;
	classify[0] = 1;
	int i;
	for(i = 1; i < 360; i++)
	{
		temp0 = temp1;
		temp1 = msg -> ranges[i]; 
		temp_len = abs(temp1 - temp0);
		if(temp_len > 0.1)
			num++;
		classify[i] = num + 1;
	}
	ROS_INFO("The num is %d", num);
	
	
	/*
	float forward_distance = msg -> ranges[0];
	int i = 0;
	if(forward_distance != 0 && forward_distance < 0.3)
	{
		if(ros::ok())
			run_forward();
	}
	else
	{
		if(ros::ok())
			run_stop();
	}
	*/
}
